name: GitHub Actions Demo
run-name: ${{ github.actor }} CI for ddpt
on: [push, pull_request]
defaults:
  run:
    shell: bash
jobs:
  build_and_test:
    runs-on: [self-hosted, dds-base]
    strategy:
      fail-fast: false
    steps:
      - name: Check repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup IMEX Cache Var
        run: |
          echo 'IMEX_SHA<<EOF' >> $GITHUB_ENV
          cat imex_version.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Checkout IMEX
        uses: actions/checkout@v3
        with:
          repository: intel-innersource/frameworks.ai.mlir.mlir-extensions
          token: ${{ secrets.PATIMEX }}
          path: third_party/imex
          ref: ${{ env.IMEX_SHA }}
      - name: Cache miniconda
        id: cache-miniconda
        uses: actions/cache@v3
        env:
          MINICONDA_CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: third_party/install/miniconda/**
          key: ${{ runner.os }}-miniconda-${{ env.MINICONDA_CACHE_NUMBER }}-${{ hashFiles('conda-env.yml') }}
      - name: Miniconda
        if: steps.cache-miniconda.outputs.cache-hit != 'true'
        run: |
          mkdir -p "$GITHUB_WORKSPACE"/third_party/install
          cd "$GITHUB_WORKSPACE"/third_party
          wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
          bash Miniconda3-latest-Linux-x86_64.sh -u -b -f -p $GITHUB_WORKSPACE/third_party/install/miniconda
          echo "$GITHUB_WORKSPACE/third_party/install/miniconda/bin" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/third_party/install/miniconda/condabin" >> $GITHUB_PATH
          export PATH=$GITHUB_WORKSPACE/third_party/install/miniconda/bin:${PATH}
          . $GITHUB_WORKSPACE/third_party/install/miniconda/etc/profile.d/conda.sh
          . $GITHUB_WORKSPACE/third_party/install/miniconda/bin/activate
          cd -
          conda env create -f conda-env.yml
          conda clean -a -y
          # conda create -q -n ddpt -c intel -c defaults pybind11 numpy cmake ninja impi-devel libstdcxx-ng mpi4py pytest scipy tbb-devel
      - name: Setup miniconda
        if: steps.cache-miniconda.outputs.cache-hit == 'true'
        run: |
          echo "$GITHUB_WORKSPACE/third_party/install/miniconda/bin" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/third_party/install/miniconda/condabin" >> $GITHUB_PATH
          export PATH=$GITHUB_WORKSPACE/third_party/install/miniconda/bin:${PATH}
      - name: Setup LLVM Cache Var
        run: |
          echo 'LLVM_SHA<<EOF' >> $GITHUB_ENV
          cat third_party/imex/build_tools/llvm_version.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Cache LLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        env:
          LLVM_CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: third_party/install/llvm-mlir/**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}
      - name: Build LLVM MLIR
        if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        run: |
          echo "INFO: Need to rebuild LLVM-MLIR. Previous installation for MLIR not found"
          . $GITHUB_WORKSPACE/third_party/install/miniconda/etc/profile.d/conda.sh
          . $GITHUB_WORKSPACE/third_party/install/miniconda/bin/activate ddpt
          np=`nproc`
          pushd third_party
          if [ -d "llvm-project" ]; then rm -rf llvm-project; fi
          mkdir llvm-project || exit 1
          cd llvm-project || exit 1
          git init
          git remote add origin https://github.com/llvm/llvm-project || exit 1
          git fetch origin ${{ env.LLVM_SHA }} || exit 1
          git reset --hard FETCH_HEAD || exit 1
          if [ -d "$GITHUB_WORKSPACE/third_party/imex/build_tools/patches" ]; then git apply $GITHUB_WORKSPACE/third_party/imex/build_tools/patches/*.patch; fi
          cd -
          mkdir -p build/llvm-mlir || exit 1
          cd build/llvm-mlir || exit 1
          cmake ../../llvm-project/llvm -GNinja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_INSTALL_UTILS=ON -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_ZSTD=OFF -DLLVM_DISTRIBUTION_COMPONENTS="llvm-headers;llvm-libraries;cmake-exports;FileCheck;count;not;mlir-headers;mlir-libraries;mlir-cmake-exports;mlir-tblgen;mlir-cpu-runner" -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE"/third_party/install/llvm-mlir
          cmake --build . -j ${np} || exit 1
          cmake --install . || exit 1
          cp bin/FileCheck $GITHUB_WORKSPACE/third_party/install/llvm-mlir/bin/
          cp bin/count $GITHUB_WORKSPACE/third_party/install/llvm-mlir/bin/
          cp bin/not $GITHUB_WORKSPACE/third_party/install/llvm-mlir/bin/
          popd
      - name: Cache IMEX
        id: cache-imex-mlir
        uses: actions/cache@v3
        env:
          IMEX_CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: third_party/install/imex/**
          key: ${{ runner.os }}-build-imex-${{ env.IMEX_CACHE_NUMBER }}-${{ env.IMEX_SHA }}
      - name: Build IMEX
        if: steps.cache-imex-mlir.outputs.cache-hit != 'true'
        run: |
          . $GITHUB_WORKSPACE/third_party/install/miniconda/etc/profile.d/conda.sh
          . $GITHUB_WORKSPACE/third_party/install/miniconda/bin/activate ddpt
          mkdir -p third_party/build/imex
          pushd third_party/build/imex
          MLIR_DIR=$GITHUB_WORKSPACE/third_party/install/llvm-mlir cmake $GITHUB_WORKSPACE/third_party/imex -DCMAKE_BUILD_TYPE=debug -G Ninja
          cmake --build . -j ${np} || exit 1
          cmake --install . --prefix=$GITHUB_WORKSPACE/third_party/install/imex || exit 1
          popd
      - name: Build DDPT
        run: |
          . $GITHUB_WORKSPACE/third_party/install/miniconda/etc/profile.d/conda.sh
          . $GITHUB_WORKSPACE/third_party/install/miniconda/bin/activate ddpt
          MLIRROOT=$GITHUB_WORKSPACE/third_party/install/llvm-mlir IMEXROOT=$GITHUB_WORKSPACE/third_party/install/imex python setup.py install
          # DDPT_ROOT=`pip show -f ddptensor | grep Location | awk '{print $2}'`
          # for some reason we cannot use the idtr from the install, not even a copy works
          libidtr=`ls ${PWD}/build/lib.linux-x86_64-cpython-*/ddptensor/libidtr.so`
          echo "DDPT_IDTR_SO=${libidtr}" >> $GITHUB_ENV
          echo $DDPT_IDTR_SO
      - name: Test DDPT (pytest)
        run: |
          . $GITHUB_WORKSPACE/third_party/install/miniconda/etc/profile.d/conda.sh
          . $GITHUB_WORKSPACE/third_party/install/miniconda/bin/activate ddpt
          cd test
          echo $DDPT_IDTR_SO
          ldd $DDPT_IDTR_SO
          pytest . -v -s
          DDPT_FORCE_DIST=1 pytest . -v -s
          mpirun -n 2 pytest . -v -s
          mpirun -n 3 pytest . -v -s
          mpirun -n 4 pytest . -v -s
          cd -
      - name: Run examples
        run: |
          . $GITHUB_WORKSPACE/third_party/install/miniconda/etc/profile.d/conda.sh
          . $GITHUB_WORKSPACE/third_party/install/miniconda/bin/activate ddpt
          cd examples
          DDPT_FALLBACK=numpy python -u ./stencil-2d.py 5 1024 star 4
          DDPT_FALLBACK=numpy DDPT_FORCE_DIST=1 python -u ./stencil-2d.py 5 1024 star 4
          mpirun -n 2 -genv DDPT_FALLBACK=numpy python -u ./stencil-2d.py 5 2048 star 2
          mpirun -n 3 -genv DDPT_FALLBACK=numpy python -u ./stencil-2d.py 5 2048 star 2
          mpirun -n 4 -genv DDPT_FALLBACK=numpy python -u ./stencil-2d.py 5 2048 star 2
          python -u ./wave_equation.py
          DDPT_FORCE_DIST=1 python -u ./wave_equation.py
          mpirun -n 2 python -u ./wave_equation.py
          mpirun -n 3 python -u ./wave_equation.py
          mpirun -n 4 python -u ./wave_equation.py
          python -u ./shallow_water.py
          cd -
      - name: Cleanup
        run: |
          pip list
          pip uninstall -y ddptensor
